from __future__ import print_function
import os
import sys

import grpc

import pairs_pb2
import pairs_pb2_grpc

def run():

    if len(sys.argv) == 2:
        serviceIdentifier = sys.argv[1]
    else:
        # Default server address
        serviceIdentifier = 'localhost:50051'

    # Creates a channel to the provide server address
    channel = grpc.insecure_channel(serviceIdentifier)

    # Creates a client stub to call RPC methods on the server
    # When calling methods on the stub, it sends an RPC request to the server over the channel
    # OperationsStub is generated by Protocol Buffers compiler from pairs.proto
    stub = pairs_pb2_grpc.OperationsStub(channel)

    try:
        while True:
            command = input()

            # Insert request
            if command.startswith('I,'):
                _, key, value = command.split(',', 2)
                # Call Insert method on the stub and send an Insert request to server
                # The method returns the response from the server
                response = stub.Insert(pairs_pb2.InsertRequest(key=int(key), value=value))
                print(response.result)

            # Search request
            elif command.startswith('C,'):
                _, key = command.split(',', 1)
                # Call Search method on the stub and send a Search request to server
                response = stub.Search(pairs_pb2.SearchRequest(key=int(key)))
                print(response.value)

            # Activate request
            elif command.startswith('A,'):
                _, serviceID = command.split(',', 1)
                # Call Activate method on the stub and send an Activate request to server
                response = stub.Activate(pairs_pb2.ActivateRequest(service_id=serviceID))
                print(response.code)

            # Terminate request
            elif command == 'T':
                # Call Terminate method on the stub and send a Terminate request to server
                response = stub.Terminate(pairs_pb2.TerminateRequest())
                print(response.result)
                break

    except EOFError:
        sys.exit(0)


if __name__ == '__main__':
    run()
